class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind();
        uf.makeSet(n);
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        
        // which parent node has how many initial infected nodes. if more than 1 node intially infected then, 
        // this group won't help us
        int[] infectedGroupAfterUnion = new int[n];
        for(int node : initial) {
            int parent = uf.findSet(node).parent.data;
            infectedGroupAfterUnion[parent]++;
        }
        
        int maxSize = -1, ans = -1, m = initial.length;
        for(int i = 0; i < m; i++) {
            Node node = uf.findSet(initial[i]).parent;
            int parent = node.parent.data, size = node.size;
            if(infectedGroupAfterUnion[parent] == 1 && size >= maxSize) {
                if(size == maxSize) ans = Math.min(ans, initial[i]);
                else ans = initial[i];
                maxSize = size;
            }
        }
        
        // if there is no parent node which single node infected initially, then remove the smallest node
        if(ans == -1) {
            ans = Integer.MAX_VALUE;
            for(int k : initial) ans = Math.min(ans, k);
            return ans;
        }
        
        return ans;
    }
}

class Node {
    int data, rank, size;
    Node parent;
}

class UnionFind {
    
    Map<Integer, Node> map;
    
    public UnionFind() {
        map = new HashMap<>();
    }
    
    public void makeSet(int n) {
        for(int i = 0; i < n; i++) {
            Node newNode = new Node();
            newNode.data = i;
            newNode.size = 1;
            newNode.parent = newNode;
            map.put(i, newNode);
        }
    }
    
    public Node findSet(int a) {
        return findSet(map.get(a));
    }
    
    private Node findSet(Node node) {
        if(node == null || node.parent == node) return node;
        Node newNode = findSet(node.parent);
        node.parent = newNode;
        return newNode;
    }
    
    public void union(int a, int b) {
        Node pA = findSet(map.get(a));
        Node pB = findSet(map.get(b));
        
        if(pA == pB) return;
        
        if(pA.rank >= pB.rank) {
            pB.parent = pA;
            pA.rank = pA.rank == pB.rank ? pA.rank + 1 : pA.rank;
            pA.size += pB.size;
        } else {
            pA.parent = pB;
            pB.rank ++;
            pB.size += pA.size;
        }
    }
}