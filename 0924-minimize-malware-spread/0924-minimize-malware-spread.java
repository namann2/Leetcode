class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind uf = new UnionFind();
        uf.makeSet(n);
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        
        // number of nodes which were initially impacted in a particular group
        int m = initial.length;
        int[] g = new int[n];
        for(int i = 0; i < m; i++) {
            Node node = uf.findSet(initial[i]).parent;
            g[node.data]++;
        }
        
        // i need to remove only one node from the initially impacted node,
        // this need should only exist in the group so that it could be removed
        int maxSize = -1, ans = -1;
        for(int i = 0; i < m; i++) {
            Node node = uf.findSet(initial[i]).parent;
            int parent = node.data, size = node.size;
            if(g[parent] == 1 && size >= maxSize) { // if the group to which this malwared node belongs to has only 1 initial node
                if(size == maxSize && ans > initial[i]) ans = initial[i];
                else if(size > maxSize) ans = initial[i];
                maxSize = size;
            }
        }
        // it is possible that all nodes exists in same group such that g[any node] > 1 for eg : example 1
        if(ans != -1) return ans;
        
        int minNode = Integer.MAX_VALUE;
        for(int node : initial)
            minNode = Math.min(minNode, node);
        
        return minNode;
    }
}

class Node {
    int data, rank, size;
    Node parent;
    public Node(int data, int rank, int size) {
        this.data = data;
        this.rank = rank;
        this.size = size;
    }
}

class UnionFind {
    Map<Integer, Node> map;
    public UnionFind() {
        this.map = new HashMap<>();
    }
    
    public void makeSet(int n) {
        for(int i = 0; i < n; i++) {
            Node newNode = new Node(i, 0, 1);
            newNode.parent = newNode;
            map.put(i, newNode);
        }
    }
    
    public Node findSet(int a) {
        return findSet(map.get(a));
    }
    
    private Node findSet(Node node) {
        if(node == null || node.parent == node) return node;
        Node newParent = findSet(node.parent);
        node.parent = newParent;
        return newParent;
    }
    
    public void union(int a, int b) {
        Node pA = findSet(map.get(a));
        Node pB = findSet(map.get(b));
        
        if(pA == pB) return;
        
        if(pA.rank >= pB.rank) {
            pB.parent = pA;
            pA.rank = pA.rank == pB.rank ? pA.rank : pA.rank + 1;
            pA.size += pB.size;
        } else {
            pA.parent = pB;
            pB.rank ++;
            pB.size += pA.size;
        }
    }
}